$grid-breakpoints: (
        sm: 576px,
        md: 768px,
        lg: 992px,
        xl: 1920px
);

@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value, $important: false) {
  @if (map-has-key($grid-breakpoints, $min-screen)) {
    $min-screen: map-get($grid-breakpoints, $min-screen)
  }

  @if (map-has-key($grid-breakpoints, $max-screen)) {
    $max-screen: map-get($grid-breakpoints, $max-screen)
  }

  $a: ($max-value - $min-value) / ($max-screen - $min-screen);

  $b: $min-value - $a * $min-screen;

  $sign: " + ";
  @if ($b < 0) {
    $sign: " - ";
    $b: abs($b);
  }

  $res: calc(#{$a*100}vw#{$sign}#{$b});

  @if ($important == true) {
    $res: #{$res} #{' !important'};
  }

  @return $res;
}

@function rem($font-size) {
  $base: 16;
  @return #{$font-size / $base}rem;
}

@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value, $important: false) {
  @if (map-has-key($grid-breakpoints, $min-screen)) {
    $min-screen: map-get($grid-breakpoints, $min-screen)
  }

  @if (map-has-key($grid-breakpoints, $max-screen)) {
    $max-screen: map-get($grid-breakpoints, $max-screen)
  }

  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-screen) {
      @each $property in $properties {
        #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value, $important);
      }
    }

    @media screen and (min-width: $max-screen) {
      @each $property in $properties {
        @if ($important == true) {
          #{$property} : #{$max-value} #{' !important'};
        } @else {
          #{$property}: $max-value;
        }
      }
    }
  }
}

@mixin iterate($direction: start, $count: 1, $step: .05, $initial-delay: 0) {
  @if ($direction == center) {
    $center: round($count / 2);

    @if ($center == floor($count / 2)) {
      $center1: $center;
      $center2: $center + 1;

      @for $i from 1 through $center - 1 {
        &:nth-child(#{$i}) {
          transition-delay: #{($center - $i + 1) * $step + $initial-delay}s;
        }

        @if ($i < $center) {
          &:nth-child(#{$count - $i + 1}) {
            transition-delay: #{($center - $i + 1) * $step + $initial-delay}s;
          }
        }
      }

      @for $i from $center1 through $center2 {
        &:nth-child(#{$i}) {
          transition-delay: #{$step + $initial-delay}s;
        }
      }
    } @else {
      @for $i from 1 through $center - 1 {
        $time: #{($i+1) * $step + $initial-delay}s;
        $iterator1: $center - $i;
        $iterator2: $center + $i;

        &:nth-child(#{$iterator1}) {
          transition-delay: $time;
        }

        &:nth-child(#{$iterator2}) {
          transition-delay: $time;
        }
      }

      &:nth-child(#{$center}) {
        transition-delay: #{$step + $initial-delay}s;
      }
    }
  }

  @for $i from 1 through $count {
    $time: #{$i * $step + $initial-delay}s;

    @if ($direction == start) {
      &:nth-child(#{$i}) {
        transition-delay: $time;
      }
    }

    @if ($direction == end) {
      $iterator: $count - $i + 1;

      &:nth-child(#{$iterator}) {
        transition-delay: $time;
      }
    }
  }
}

@function str-split($string, $separator) {
  $i: str-index($string, $separator);
  @if $i != null {
    @return append(
                    str-slice($string, 1, $i - 1),
                    str-split(str-slice($string, $i + str-length($separator)), $separator)
    );
  }
  @return $string
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function get-short-name($string) {
  $temp: str-split($string, '-'); // split in two words
  $temp: #{str-slice(nth($temp, 1), 0, 1) + str-slice(nth($temp, 2), 0, 1)}; //get first letters

  @if (length($temp) != 0) {
    @return #{$temp};
  }
}

@function split($input-string, $separator: ' ') {
  $result: ();
  $error: '';

  $index: str-index($input-string, $separator);
  $indent: str-length($separator);

  @while ($index != null) {
    $item: str-slice($input-string, 1, $index - 1);
    $input-string: str-slice($input-string, $index + $indent);
    $index: str-index($input-string, $separator);

    @if (str-length($item) != 0) {
      $result: append($result, $item);
    }
  }

  $result: append($result, $input-string);

  @return $result;
}

@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'fr': 1fr);

  @return $value * map-get($units, $unit);
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@function nth-delete($list, $n) {
  $result: ();
  $n: if($n < 0, length($list) + $n + 1, $n);
  $bracketed: is-bracketed($list);
  $separator: list-separator($list);
  @for $i from 1 through length($list) {
    @if $i != $n {
      $result: append($result, nth($list, $i));
    }
  }
  @return join((), $result, $separator, $bracketed);
}

@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list)*-1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}

@mixin rect($size, $position: 'relative', $before: true) {
  $rect-sizes: (
          '1x1': 100,
          '1x2': 50,
          '3x4': 75,
          '9x16': 56.25,
  );

  @if ($before != true) {
    $pseudo: after;
  }

  $pseudo: before !default;

  @if (map-has-key($rect-sizes, $size)) {
    position: $position;

    &:#{$pseudo} {
      content: '';
      position: relative;
      display: block;
      width: 100%;
      pointer-events: none;
      padding-bottom: map-get($rect-sizes, $size);
    }

    &-inner {
      top: 0;
      left: 0;
      @extend .fs !optional;
    }
  } @else {
    @error "Size is not specified";
  }
}

@mixin selection($bc, $c) {
  *::-moz-selection {
    background: $bc;
    color: $c;
  }
  *::selection {
    background: $bc;
    color: $c;
  }
}

@mixin active {
  &:focus, &:active, &:active:focus {
    @content;
  }
}

@mixin media-max($bp) {
  $size: $bp - 1 !default;

  @if (map-has-key($grid-breakpoints, $bp)) {
    $size: map-get($grid-breakpoints, $bp) - 1;
  }

  @media screen and (max-width: $size) {
    @content;
  }
}

@mixin media-min($bp) {
  $size: $bp !default;

  @if (map-has-key($grid-breakpoints, $bp)) {
    $size: map-get($grid-breakpoints, $bp);
  }

  @media screen and (min-width: $size) {
    @content;
  }
}

@mixin media-between($bp1, $bp2) {
  $size1: $bp1 !default;
  $size2: $bp2 - 1 !default;

  @if (map-has-key($grid-breakpoints, $bp1)) {
    $size1: map-get($grid-breakpoints, $bp1);
  }

  @if (map-has-key($grid-breakpoints, $bp2)) {
    $size2: map-get($grid-breakpoints, $bp2) - 1;
  }

  @media screen and (min-width: $size1) and (max-width: $size2) {
    @content;
  }
}

@mixin grid {
  display: grid;

  @each $grid-size, $sizes in $grid-size {
    @each $size in $sizes {
      $class_postfix: $size;
      $fractions_list: split($size, '-');
      $i: 0;
      $isReversed: false;

      @if (nth($fractions_list, 1) == reverse) {
        $fractions_list: nth-delete($fractions_list, 1); //remove 'reverse' from fractions
        $isReversed: true;

        @if (length($fractions_list) == 1) { //only one fraction means that would be only one element in a row
          $fractions_list: "1";
        }
      }

      @each $fraction in $fractions_list {
        $i: $i + 1;
        $temp: $temp + ' ' + $fraction + 'fr';

        @if ($fraction != '') {
          @if (length($fractions_list) <= $i) {
            $fractions: unquote($temp);

            @if ($grid-size != '') { // media query exist
              #{'&--' + $grid-size + '-' + $class_postfix} {
                @include media-max($grid-size) {
                  grid-template-columns: $fractions;
                }

                @if ($isReversed) {
                  @for $i from length($fractions_list) through 1 {
                    & > *:nth-child(#{$i}) {
                      @include media-max($grid-size) {
                        order: length($fractions_list) - $i + 1;
                      }
                    }
                  }
                }
              }
            } @else { // default state
              #{'&--' + $class_postfix} {
                grid-template-columns: $fractions;

                @if ($isReversed) {
                  @for $i from length($fractions_list) through 1 {
                    & > *:nth-child(#{$i}) {
                      order: length($fractions_list) - $i + 1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      $fractions: '';
    }
  }
}

.text-heavy {
  font-weight: 900;

  h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
    font-weight: 900;
  }
}

.text-medium {
  font-weight: 500;

  h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
    font-weight: 500;
  }
}

.text-regular {
  font-weight: 400;

  h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
    font-weight: 400;
  }
}

.line-height-175 {
  line-height: 1.75;
}

.text-grey-dark {
  color: #4d4d4d;
}

.m-0 {
  margin: 0 !important;
}

.ml-0 {
  margin-left: 0 !important;
}

.mr-0 {
  margin-right: 0 !important;
}

.ml-auto {
  margin-left: auto;
}

.mr-auto {
  margin-right: auto;
}

.mt-auto {
  margin-top: auto;
}

.mb-auto {
  margin-bottom: auto;
}

.mv-auto {
  margin-left: auto;
  margin-right: auto;
}

.is-print-hidden {
  @media print {
    display: none;
  }
}

%scrollable {
  scrollbar-width: none;
  overflow: -moz-scrollbars-none;
  -ms-overflow-style: none;
  overflow-scrolling: touch;
  -webkit-overflow-scrolling: touch;
}

.afs {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.angle-prev {
  &:before {
    content: '';
    position: absolute;
    top: 50%;
    left: 25px;
    width: 10px;
    height: 10px;
    border-width: 3px 3px 0 0;
    border-style: solid;
    color: #e84188;
    transform: translate(0, -50%) rotate(45deg);
  }
}

$temp: '';
$spaces: 10, 20, 30, 40, 50, 100;
$directions: (
        'margin-top',
        'margin-right',
        'margin-bottom',
        'margin-left',
        'padding-top',
        'padding-right',
        'padding-bottom',
        'padding-left'
);

@each $space in $spaces {
  @each $direction in $directions {
    // default example: .mt-50 (margin-top: 50px;)
    #{'.' + get-short-name($direction) + '-' + $space} {
      #{$direction}: #{$space}px !important;
    }

    @each $breakpoint, $width in $grid-breakpoints {
      @include media-max($breakpoint) {
        //breakpoints example: .mt-md-50 (margin-top: 50px if window width less than 768px)
        #{'.' + get-short-name($direction) + '-' + $breakpoint + '-' + $space} {
          #{$direction}: #{$space}px !important;
        }
      }
    }
  }
}
